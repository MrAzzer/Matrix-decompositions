if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d[d!=0])
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
clear
library(Matrix)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d[d!=0])
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library(Matrix)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library(Matrix)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library(Matrix)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library(Matrix)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library("Matrix")
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library("Matrix")
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
x
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
x=solve(R, t(Q) %*% b)
library("pracma")
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library(pracma)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
v=SVD$v
u=SVD$u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
library(pracma)
Decomposition=function(A, b){
#cholesky
if (ncol(A)==nrow(A) && all(eigen(A)$values>0) && all(t(A)==A)){
print("Cholesky decomposition")
L=chol(A)
y=solve(t(L), b)
x=solve(L, y)
return (x)
}
#qr
if (qr(A)$rank==ncol(A)){
print("QR decomposition")
QR=qr(A)
Q=qr.Q(A)
R=qr.R(A)
x=solve(R, t(Q) %*% b)
return (x)
}
#lu
if (ncol(A)==nrow(A) && det(A)!=0){
print("LU decomposition")
LU=lu(A)
L=expand(LU)$L
U=expand(LU)$U
y=solve(L, b)
x=solve(U, y)
return (x)
}
#svd
else {
print("SVD decomposition")
SVD=svd(A)
d=SVD$d
d
v=SVD$v
v
u=SVD$u
u
d_inv=diag(1/d)
x=v %*% d_inv %*% u %*% b
return (x)
}
}
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
is_square
A=matrix(c(2,3,1,4,1,-2,4,1,3,1,-1,2,4,4,2,-3,5,2,3,1),5,4, TRUE)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
A
b=c(20,5,8,3,15)
Decomposition(A, b)
A
A
